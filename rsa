#!/usr/bin/env python3

import random
import math
import sys


def generates_p_and_q():
    numbers = [i for i in range(2, 100000001)]

    for n in range(2, 1000000001):
        for i in range(2, math.ceil(n/2) + 1):
            if n % i == 0:
                numbers.remove(n)
                break

    # Selecting any 2 prime numbers randomly
    p = random.choice(numbers)
    numbers.remove(p)
    q = random.choice(numbers)

    return p, q


def generates_encryption(phi):
    possible_e_values = []

    for i in range(2, phi):
        if math.gcd(i, phi) == 1:
            e = i
            possible_e_values.append(e)

    return random.choice(possible_e_values)


def generates_decryption(e, phi):
    for i in range(2, phi):
        if (i * e) % phi == 1:  # ed mod(phi) = 1
            d = i
            break

    return d


def encrypt(msg, e, n):
    # (msg^e) mod n
    c = pow(msg, e, n)
    return c


def decrypt(msg, d, n):
    # (msg^d) mod n
    p = pow(msg, d, n)
    return p


p, q = generates_p_and_q()
print(f'[+] p = {p} and q = {q}')

n = p * q
phi = (p - 1) * (q - 1)
print(f'[+] n = {n} and euler totient = {phi}')

e = generates_encryption(phi)
print(f'[+] e = {e}')

d = generates_decryption(e, phi)
print(f'[+] d = {d}')

msg = random.randint(1, n)
print(f'[+] msg : {msg}')

e_msg = encrypt(msg, e, n)
print(f'[+] Encrypted msg : {e_msg}')

d_msg = decrypt(e_msg, d, n)
print(f'[+] Decrypted msg : {d_msg}')
